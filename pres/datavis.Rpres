statistical graphics in R
========================================================
author: Joshua Tokle
date: 11 Apr 2015

Tufte's principles of graphical excellence
========================================================
- Graphical excellence is the well-designed presentation of interesting dataâ€”a matter of substance, of statistics, and of design. 
- Graphical excellence consists of complex ideas communicated with clarity, precision and efficiency. 
- Graphical excellence is that which gives to the viewer the greatest number of ideas in the shortest time with the least ink in the smallest space. 
- Graphical excellence is nearly always multivariate. 
- And graphical excellence requires telling the truth.

Anscombe's quartet
===

<style>
.reveal section td.inner { border-left: solid 2px black; }
.reveal section th { text-align: center; }
.reveal section th.inner { border-left: solid 2px black; }
.reveal section thead { border-bottom: solid 2px black; }
</style>

<table>
<thead>
<tr>
<th colspan="2">set 1</th>
<th colspan="2" class="inner">set 2</th>
<th colspan="2" class="inner">set 3</th>
<th colspan="2" class="inner">set 4</th>
</tr>
<tr>
<th>x</th><th>y</th><th class="inner">x</th><th>y</th><th class="inner">x</th><th>y</th><th class="inner">x</th><th>y</th>
</tr>
</thead>
<tbody>
<tr><td>10</td><td>8.04</td><td class="inner">10</td><td>9.14</td><td class="inner">10</td><td>7.46</td><td class="inner">8</td><td>6.58</td></tr>
<tr><td>8</td><td>6.95</td><td class="inner">8</td><td>8.14</td><td class="inner">8</td><td>6.77</td><td class="inner">8</td><td>5.76</td></tr>
<tr><td>13</td><td>7.58</td><td class="inner">13</td><td>8.74</td><td class="inner">13</td><td>12.74</td><td class="inner">8</td><td>7.71</td></tr>
<tr><td>9</td><td>8.81</td><td class="inner">9</td><td>8.77</td><td class="inner">9</td><td>7.11</td><td class="inner">8</td><td>8.84</td></tr>
<tr><td>11</td><td>8.33</td><td class="inner">11</td><td>9.26</td><td class="inner">11</td><td>7.81</td><td class="inner">8</td><td>8.47</td></tr>
<tr><td>14</td><td>9.96</td><td class="inner">14</td><td>8.10</td><td class="inner">14</td><td>8.84</td><td class="inner">8</td><td>7.04</td></tr>
<tr><td>6</td><td>7.24</td><td class="inner">6</td><td>6.13</td><td class="inner">6</td><td>6.08</td><td class="inner">8</td><td>5.25</td></tr>
<tr><td>4</td><td>4.26</td><td class="inner">4</td><td>3.10</td><td class="inner">4</td><td>5.39</td><td class="inner">19</td><td>12.50</td></tr>
<tr><td>12</td><td>10.84</td><td class="inner">12</td><td>9.13</td><td class="inner">12</td><td>8.15</td><td class="inner">8</td><td>5.56</td></tr>
<tr><td>7</td><td>4.82</td><td class="inner">7</td><td>7.26</td><td class="inner">7</td><td>6.42</td><td class="inner">8</td><td>7.91</td></tr>
<tr><td>5</td><td>5.68</td><td class="inner">5</td><td>4.74</td><td class="inner">5</td><td>5.73</td><td class="inner">8</td><td>6.89</td></tr>

</tbody>
</table>


===
For each set of variables we have:

<table>
<tr><td>sample mean of x variable</td><td style="text-align: center">9</td></tr>
<tr><td>sample variance of x variable</td><td style="text-align: center">11</td></tr>
<tr><td>sample mean of y variable</td><td style="text-align: center">7.5</td></tr>
<tr><td>sample variance of y variable</td><td style="text-align: center">4.14</td></tr>
<tr><td>regression line</td><td style="text-align: center">y = 0.5 x + 3</td></tr>
</table>


===
```{r, echo=FALSE}
library(ggplot2)
library(reshape2)
data(anscombe)
anscombe$r <- row.names(anscombe)
a2 <- melt(anscombe, id.vars="r")
a2$vorig <- a2$variable
a2$variable <- as.character(a2$variable)
a2$variable <- substring(a2$variable, 1, 1)
a2$set <- as.integer(substring(a2$vorig, 2))
a2$d1 <- (a2$set + 1) %/% 2
a2$d2 <- ((a2$set + 1) %% 2) + 1

a3 <- subset(a2, select=c("r", "set", "d1", "d2", "variable", "value"))
a4 <- dcast(a3, r + set + d1 + d2 ~ variable)
ggplot(a4, aes(x, y)) + facet_grid(d1 ~ d2) + 
  geom_abline(intercept=3, slope=0.5, color=I("red"), alpha=I(0.35)) + 
  geom_point()
```

Wow! Dataviz!
===
![d3](img/d3.png)

... Dataviz?
===
```{r, echo=FALSE}
data(iris)
Sepal.Length <- iris$Sepal.Length
hist(Sepal.Length)
```
***
Static 2D plots are still a valuable tool for *exploration*.

Fancy graphics come later.

The Grammar of Graphics
===
![The Grammar of Graphics](img/gog2.jpg)


===
The grammar of graphics is Leland Wilkinson's conceptual framework for describing statistical graphics. Graphics are broken down into:
* The underlying data
* *aesthetic* mappings between variables and graphical features: position, color, shape, facet
* *stats* that transform the variables
* *coordinate* transformations


===
Take the iris data set: map `Sepal.Width` to the `x` coordinate, apply the "bin" stat, and display the "bar" geom:
```{r, echo=FALSE}
ggplot(iris, aes(Sepal.Width)) + stat_bin(binwidth=0.2)
```


===
We can map `Species` to the "fill" aesthetic to break it out:
```{r, echo=FALSE}
ggplot(iris, aes(Sepal.Width, fill=Species)) + stat_bin(binwidth=0.2)
```


===
Or maybe we'd rather map `Species` to the facet aesthetic:
```{r, echo=FALSE}
ggplot(iris, aes(Sepal.Width)) + facet_grid(Species ~ .) + stat_bin(binwidth=0.2)
```

ggplot2
===
Once the data has been prepared, these are all one-liners using Hadley Wickam's `ggplot2` package for R.
![Hadley Wickham](img/hadley.jpg)


===
We will quickly run through:
* histograms
* scatterplots
* maps


===
But keep in mind that prepping the data is ~ 90% of the battle.

For data wrangling, consider learning these packages (also from Mr. Wickham):
* reshape2
* plyr

histograms
===
```{r}
data(mtcars) # load the mtcars example data
mtcars <- subset(mtcars, select=c("mpg", "cyl", "disp", "wt", "qsec"))
head(mtcars)
```


===
```{r}
ggplot(mtcars, aes(qsec)) + 
  stat_bin(binwidth=1)
```


===
```{r}
ggplot(mtcars, aes(qsec, fill=as.factor(cyl))) +
  stat_bin(binwidth=1)
```


===
```{r}
ggplot(iris, aes(Sepal.Width, fill=Species)) +
  stat_bin(binwidth=0.25, position="dodge")
```


===
```{r}
ggplot(iris, aes(Sepal.Width, fill=Species)) +
  stat_bin(binwidth=0.25, position="dodge") +
  coord_flip()
```

===
```{r}
library(scales)
ggplot(iris, aes(Sepal.Width, fill=Species)) +
  geom_bar(binwidth=0.25, position="fill") +
  scale_y_continuous(labels=percent_format())
```

scatterplots
===
```{r}
ggplot(iris, aes(Petal.Width, Petal.Length)) + 
  geom_point()
```


===
```{r}
ggplot(iris, aes(Petal.Width, Petal.Length, color=Species)) + 
  geom_point()
```


===
```{r}
ggplot(iris, aes(Petal.Width, Petal.Length, shape=Species)) + 
  geom_point()
```


===
```{r}
ggplot(iris, aes(Petal.Width, Petal.Length, color=Species, size=Sepal.Width)) + 
  geom_point()
```


===
```{r, figs.only=TRUE}
model <- lm(Petal.Length ~ Petal.Width, data=iris)
# => intercept = 1.084, slope = 2.230
ggplot(iris, aes(Petal.Width, Petal.Length)) + 
  geom_point() +
  geom_abline(intercept=1.084, slope=2.230)
```


===
```{r, figs.only=TRUE}
model <- lm(Petal.Length ~ Petal.Width, data=iris)
# => intercept = 1.084, slope = 2.230
ggplot(iris, aes(Petal.Width, Petal.Length)) +
  geom_abline(intercept=1.084, slope=2.230, color="blue", alpha=0.2) + 
  geom_point()
```

===
```{r, figs.only=TRUE}
model <- lm(Petal.Length ~ Petal.Width, data=iris)
# => intercept = 1.084, slope = 2.230
ggplot(iris, aes(Petal.Width, Petal.Length)) +
  geom_point() +
  geom_smooth()
```


===
```{r}
ggplot(iris, aes(Petal.Width, Petal.Length, color=Species, size=Sepal.Width, group=NA)) + 
  geom_point() +
  geom_smooth() +
  labs(title="too much?")
```

choropleth plots
===